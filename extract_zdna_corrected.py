#!/usr/bin/env python3
"""
üß¨ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ Z-DNA —Å—Ç—Ä—É–∫—Ç—É—Ä –∏–∑ .probability —Ñ–∞–π–ª–æ–≤
–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: –ø–æ–∑–∏—Ü–∏—è, score1, score2, z_score, –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
"""

import os
import re
import json

def extract_zdna_from_probability(file_path, min_zscore=300, max_zscore=400):
    """–ò–∑–≤–ª–µ–∫–∞–µ–º Z-DNA —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏–∑ .probability —Ñ–∞–π–ª–∞"""
    zdna_structures = []
    
    if not os.path.exists(file_path):
        print(f"‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        return zdna_structures
    
    print(f"üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {file_path}...")
    
    with open(file_path, 'r') as f:
        for line_num, line in enumerate(f, 1):
            line = line.strip()
            if not line or line.startswith('#'):
                continue
            
            try:
                # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É: –ø–æ–∑–∏—Ü–∏—è, score1, score2, z_score, –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                parts = line.split()
                if len(parts) < 5:
                    continue
                
                position = int(parts[0])
                score1 = float(parts[1])
                score2 = float(parts[2])
                z_score_str = parts[3]
                sequence = parts[4]
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º z_score (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –Ω–∞—É—á–Ω–æ–π –Ω–æ—Ç–∞—Ü–∏–∏)
                z_score = float(z_score_str)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω Z-score
                if min_zscore <= z_score <= max_zscore:
                    zdna_structures.append({
                        'position': position,
                        'z_score': z_score,
                        'score1': score1,
                        'score2': score2,
                        'sequence': sequence,
                        'length': len(sequence)
                    })
                    
            except (ValueError, IndexError) as e:
                if line_num <= 10:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—à–∏–±–æ–∫
                    print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {line_num}: {line[:50]}... - {e}")
                continue
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(zdna_structures)} Z-DNA —Å—Ç—Ä—É–∫—Ç—É—Ä")
    return zdna_structures

def main():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    min_zscore = 300
    max_zscore = 400
    z_hunt_dir = "z_hunt_results"
    output_dir = "results"
    
    print(f"üß¨ –ò–ó–í–õ–ï–ß–ï–ù–ò–ï Z-DNA –°–¢–†–£–ö–¢–£–† (Z-score {min_zscore}-{max_zscore})")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    os.makedirs(output_dir, exist_ok=True)
    
    # –°–ø–∏—Å–æ–∫ —Ö—Ä–æ–º–æ—Å–æ–º
    chromosomes = ['chr2L', 'chr2R', 'chr3L', 'chr3R', 'chr4', 'chrX', 'chrY']
    
    all_zdna = []
    chromosome_stats = {}
    
    for chrom in chromosomes:
        prob_file = os.path.join(z_hunt_dir, f"{chrom}.fa.probability")
        
        if os.path.exists(prob_file):
            zdna_structures = extract_zdna_from_probability(prob_file, min_zscore, max_zscore)
            all_zdna.extend(zdna_structures)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö—Ä–æ–º–æ—Å–æ–º–µ –∫ –∫–∞–∂–¥–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
            for struct in zdna_structures:
                struct['chromosome'] = chrom
            
            chromosome_stats[chrom] = {
                'count': len(zdna_structures),
                'avg_zscore': sum(s['z_score'] for s in zdna_structures) / len(zdna_structures) if zdna_structures else 0,
                'max_zscore': max(s['z_score'] for s in zdna_structures) if zdna_structures else 0,
                'min_zscore': min(s['z_score'] for s in zdna_structures) if zdna_structures else 0
            }
        else:
            print(f"‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {prob_file}")
            chromosome_stats[chrom] = {'count': 0, 'avg_zscore': 0, 'max_zscore': 0, 'min_zscore': 0}
    
    print("\n" + "=" * 60)
    print(f"üéâ –û–ë–©–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ Z-DNA —Å—Ç—Ä—É–∫—Ç—É—Ä: {len(all_zdna)}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ö—Ä–æ–º–æ—Å–æ–º–∞–º
    print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ö—Ä–æ–º–æ—Å–æ–º–∞–º:")
    for chrom, stats in chromosome_stats.items():
        if stats['count'] > 0:
            print(f"   {chrom}: {stats['count']} —Å—Ç—Ä—É–∫—Ç—É—Ä, Z-score: {stats['min_zscore']:.1f}-{stats['max_zscore']:.1f} (avg: {stats['avg_zscore']:.1f})")
        else:
            print(f"   {chrom}: 0 —Å—Ç—Ä—É–∫—Ç—É—Ä")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    output_file = os.path.join(output_dir, "zdna_structures_corrected.txt")
    with open(output_file, 'w') as f:
        f.write("# Z-DNA —Å—Ç—Ä—É–∫—Ç—É—Ä—ã (Z-score 300-400)\n")
        f.write("# –•—Ä–æ–º–æ—Å–æ–º–∞\t–ü–æ–∑–∏—Ü–∏—è\tZ-score\tScore1\tScore2\t–î–ª–∏–Ω–∞\t–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å\n")
        
        for struct in sorted(all_zdna, key=lambda x: (x['chromosome'], x['position'])):
            f.write(f"{struct['chromosome']}\t{struct['position']}\t{struct['z_score']:.3f}\t")
            f.write(f"{struct['score1']:.3f}\t{struct['score2']:.3f}\t{struct['length']}\t{struct['sequence']}\n")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON —Å–≤–æ–¥–∫—É
    summary = {
        'total_structures': len(all_zdna),
        'parameters': {
            'min_zscore': min_zscore,
            'max_zscore': max_zscore
        },
        'chromosome_stats': chromosome_stats,
        'processing_info': {
            'processed_files': len([c for c in chromosomes if chromosome_stats[c]['count'] >= 0]),
            'successful_files': len([c for c in chromosomes if chromosome_stats[c]['count'] > 0])
        }
    }
    
    summary_file = os.path.join(output_dir, "zdna_summary_corrected.json")
    with open(summary_file, 'w') as f:
        json.dump(summary, f, indent=2, ensure_ascii=False)
    
    print(f"\nüìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:")
    print(f"   üìä Z-DNA —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {output_file}")
    print(f"   üìã –°–≤–æ–¥–∫–∞: {summary_file}")
    print("\n‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    main() 