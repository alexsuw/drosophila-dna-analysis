#!/usr/bin/env python3
"""
üß¨ –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ Z-DNA –∏ G-–∫–≤–∞–¥—Ä—É–ø–ª–µ–∫—Å–æ–≤
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã Z-Hunt –∏ G-quadruplex –∞–Ω–∞–ª–∏–∑–∞
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import json
import os
from collections import defaultdict, Counter
import warnings
warnings.filterwarnings('ignore')

plt.style.use('bmh')
plt.rcParams['figure.figsize'] = [12, 8]
plt.rcParams['font.size'] = 10

def load_g4_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ G-–∫–≤–∞–¥—Ä—É–ø–ª–µ–∫—Å–æ–≤"""
    try:
        g4_data = pd.read_csv('results/quadruplex_results.csv')
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
        if 'chromosome' in g4_data.columns:
            g4_data['–•—Ä–æ–º–æ—Å–æ–º–∞'] = g4_data['chromosome']
        if 'start' in g4_data.columns:
            g4_data['–ü–æ–∑–∏—Ü–∏—è'] = g4_data['start']
        if 'sequence' in g4_data.columns:
            g4_data['–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å'] = g4_data['sequence']
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(g4_data)} G-–∫–≤–∞–¥—Ä—É–ø–ª–µ–∫—Å–æ–≤")
        return g4_data
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ G4 –¥–∞–Ω–Ω—ã—Ö: {e}")
        return pd.DataFrame()

def load_zdna_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ Z-DNA"""
    zdna_files = [
        'results/zdna_structures_corrected.txt',
        'results/smart_zhunt_results_zdna_structures.txt'
    ]
    
    for file_path in zdna_files:
        try:
            if os.path.exists(file_path):
                # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
                zdna_data = pd.read_csv(file_path, sep='\t', comment='#', 
                                      names=['–•—Ä–æ–º–æ—Å–æ–º–∞', '–ü–æ–∑–∏—Ü–∏—è', 'Z-score', 'Score1', 'Score2', '–î–ª–∏–Ω–∞', '–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å'])
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(zdna_data)} Z-DNA —Å—Ç—Ä—É–∫—Ç—É—Ä –∏–∑ {file_path}")
                return zdna_data
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {file_path}: {e}")
    
    print("‚ö†Ô∏è  Z-DNA –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π DataFrame")
    return pd.DataFrame()

def load_promoter_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–º–æ—Ç–æ—Ä–∞—Ö"""
    try:
        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª—ã —Å –ø—Ä–æ–º–æ—Ç–æ—Ä–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º
        promoter_files = [
            'results/promoter_analysis.csv',
            'results/g4_promoter_analysis.txt',
            'results/string_enrichment.csv'
        ]
        
        for file_path in promoter_files:
            if os.path.exists(file_path):
                if file_path.endswith('.csv'):
                    promoter_data = pd.read_csv(file_path)
                else:
                    promoter_data = pd.read_csv(file_path, sep='\t', comment='#')
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(promoter_data)} –ø—Ä–æ–º–æ—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ {file_path}")
                return promoter_data
        
        print("‚ö†Ô∏è  –ü—Ä–æ–º–æ—Ç–æ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return pd.DataFrame()
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–æ—Ç–æ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        return pd.DataFrame()

def analyze_colocalization(g4_data, zdna_data, window=1000):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é Z-DNA –∏ G-–∫–≤–∞–¥—Ä—É–ø–ª–µ–∫—Å–æ–≤"""
    if zdna_data.empty or g4_data.empty:
        print("‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏")
        return {'total_colocalizations': 0, 'g4_with_zdna': 0, 'zdna_with_g4': 0, 'average_distance': 0, 'colocalized_pairs': []}
    
    print(f"üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ (–æ–∫–Ω–æ {window} bp)...")
    
    colocalized = []
    
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    g4_chrom_col = '–•—Ä–æ–º–æ—Å–æ–º–∞' if '–•—Ä–æ–º–æ—Å–æ–º–∞' in g4_data.columns else 'chromosome'
    g4_pos_col = '–ü–æ–∑–∏—Ü–∏—è' if '–ü–æ–∑–∏—Ü–∏—è' in g4_data.columns else 'start'
    g4_seq_col = '–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å' if '–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å' in g4_data.columns else 'sequence'
    
    zdna_chrom_col = '–•—Ä–æ–º–æ—Å–æ–º–∞'
    zdna_pos_col = '–ü–æ–∑–∏—Ü–∏—è'
    zdna_seq_col = '–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å'
    
    for _, g4 in g4_data.iterrows():
        g4_chrom = g4[g4_chrom_col]
        g4_pos = g4[g4_pos_col]
        
        nearby_zdna = zdna_data[
            (zdna_data[zdna_chrom_col] == g4_chrom) &
            (abs(zdna_data[zdna_pos_col] - g4_pos) <= window)
        ]
        
        if len(nearby_zdna) > 0:
            for _, zdna in nearby_zdna.iterrows():
                distance = abs(zdna[zdna_pos_col] - g4_pos)
                colocalized.append({
                    'chromosome': g4_chrom,
                    'g4_position': g4_pos,
                    'zdna_position': zdna[zdna_pos_col],
                    'distance': distance,
                    'g4_sequence': g4.get(g4_seq_col, ''),
                    'zdna_sequence': zdna.get(zdna_seq_col, ''),
                    'zdna_zscore': zdna.get('Z-score', 0)
                })
    
    colocalization_stats = {
        'total_colocalizations': len(colocalized),
        'g4_with_zdna': len(set([(c['chromosome'], c['g4_position']) for c in colocalized])),
        'zdna_with_g4': len(set([(c['chromosome'], c['zdna_position']) for c in colocalized])),
        'average_distance': np.mean([c['distance'] for c in colocalized]) if colocalized else 0,
        'colocalized_pairs': colocalized
    }
    
    print(f"   üìä –ù–∞–π–¥–µ–Ω–æ {colocalization_stats['total_colocalizations']} –∫–æ–ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–π")
    print(f"   üìä G4 —Å Z-DNA: {colocalization_stats['g4_with_zdna']}")
    print(f"   üìä Z-DNA —Å G4: {colocalization_stats['zdna_with_g4']}")
    
    return colocalization_stats

def create_integrated_visualizations(g4_data, zdna_data, promoter_data, colocalization_stats):
    """–°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"""
    print("üé® –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏...")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    plt.rcParams['font.family'] = ['Arial Unicode MS', 'DejaVu Sans', 'sans-serif']
    
    fig, axes = plt.subplots(2, 3, figsize=(18, 12))
    fig.suptitle('üß¨ –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ Z-DNA –∏ G-–∫–≤–∞–¥—Ä—É–ø–ª–µ–∫—Å–æ–≤\nDrosophila melanogaster (dm6)', 
                 fontsize=16, fontweight='bold')
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
    g4_chrom_col = '–•—Ä–æ–º–æ—Å–æ–º–∞' if '–•—Ä–æ–º–æ—Å–æ–º–∞' in g4_data.columns else 'chromosome'
    g4_seq_col = '–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å' if '–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å' in g4_data.columns else 'sequence'
    
    # 1. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ö—Ä–æ–º–æ—Å–æ–º–∞–º
    ax1 = axes[0, 0]
    
    # G4 –¥–∞–Ω–Ω—ã–µ
    if not g4_data.empty:
        g4_chrom_counts = g4_data[g4_chrom_col].value_counts()
        g4_chrom_counts.plot(kind='bar', ax=ax1, alpha=0.7, color='blue', label='G-–∫–≤–∞–¥—Ä—É–ø–ª–µ–∫—Å—ã')
    
    # Z-DNA –¥–∞–Ω–Ω—ã–µ
    if not zdna_data.empty and '–•—Ä–æ–º–æ—Å–æ–º–∞' in zdna_data.columns:
        zdna_chrom_counts = zdna_data['–•—Ä–æ–º–æ—Å–æ–º–∞'].value_counts()
        zdna_chrom_counts.plot(kind='bar', ax=ax1, alpha=0.7, color='red', 
                              label='Z-DNA', width=0.6)
    
    ax1.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä –ø–æ —Ö—Ä–æ–º–æ—Å–æ–º–∞–º')
    ax1.set_xlabel('–•—Ä–æ–º–æ—Å–æ–º–∞')
    ax1.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä—É–∫—Ç—É—Ä')
    ax1.legend()
    ax1.tick_params(axis='x', rotation=45)
    
    # 2. –î–ª–∏–Ω—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
    ax2 = axes[0, 1]
    if not g4_data.empty:
        g4_lengths = g4_data[g4_seq_col].str.len()
        ax2.hist(g4_lengths, bins=20, alpha=0.7, color='blue', label='G-–∫–≤–∞–¥—Ä—É–ø–ª–µ–∫—Å—ã', density=True)
    
    if not zdna_data.empty and '–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å' in zdna_data.columns:
        zdna_lengths = zdna_data['–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å'].str.len()
        ax2.hist(zdna_lengths, bins=20, alpha=0.7, color='red', label='Z-DNA', density=True)
    
    ax2.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª–∏–Ω –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π')
    ax2.set_xlabel('–î–ª–∏–Ω–∞ (bp)')
    ax2.set_ylabel('–ü–ª–æ—Ç–Ω–æ—Å—Ç—å')
    ax2.legend()
    
    # 3. –ö–æ–ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è
    ax3 = axes[0, 2]
    if colocalization_stats.get('colocalized_pairs', []):
        distances = [c['distance'] for c in colocalization_stats['colocalized_pairs']]
        ax3.hist(distances, bins=20, color='green', alpha=0.7)
        ax3.set_title(f'–†–∞—Å—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –∫–æ–ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏\n(n={len(distances)})')
        ax3.set_xlabel('–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ (bp)')
        ax3.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä')
    else:
        ax3.text(0.5, 0.5, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ\n–∫–æ–ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏', 
                ha='center', va='center', transform=ax3.transAxes, fontsize=12)
        ax3.set_title('–ö–æ–ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è')
    
    # 4. –ü—Ä–æ–º–æ—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    ax4 = axes[1, 0]
    if not promoter_data.empty:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä –≤ –ø—Ä–æ–º–æ—Ç–æ—Ä–∞—Ö vs –≥–µ–Ω–æ–º–µ
        total_g4 = len(g4_data) if not g4_data.empty else 0
        promoter_g4 = len(promoter_data) if not promoter_data.empty else 0
        
        categories = ['–í–µ—Å—å –≥–µ–Ω–æ–º', '–ü—Ä–æ–º–æ—Ç–æ—Ä—ã']
        g4_counts = [total_g4, promoter_g4]
        
        bars = ax4.bar(categories, g4_counts, color=['lightblue', 'darkblue'], alpha=0.7)
        ax4.set_title('G-–∫–≤–∞–¥—Ä—É–ø–ª–µ–∫—Å—ã –≤ –ø—Ä–æ–º–æ—Ç–æ—Ä–∞—Ö')
        ax4.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä—É–∫—Ç—É—Ä')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
        for bar, count in zip(bars, g4_counts):
            height = bar.get_height()
            if total_g4 > 0:
                percentage = (count / total_g4) * 100
                ax4.text(bar.get_x() + bar.get_width()/2., height + height*0.01,
                        f'{count}\n({percentage:.1f}%)', ha='center', va='bottom')
    else:
        ax4.text(0.5, 0.5, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ\n–ø—Ä–æ–º–æ—Ç–æ—Ä–∞—Ö', 
                ha='center', va='center', transform=ax4.transAxes, fontsize=12)
        ax4.set_title('–ü—Ä–æ–º–æ—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑')
    
    # 5. Z-score —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å Z-DNA –¥–∞–Ω–Ω—ã–µ)
    ax5 = axes[1, 1]
    if not zdna_data.empty and 'Z-score' in zdna_data.columns:
        zdna_data['Z-score'].hist(bins=30, ax=ax5, color='red', alpha=0.7)
        ax5.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ Z-score')
        ax5.set_xlabel('Z-score')
        ax5.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä—É–∫—Ç—É—Ä')
        ax5.axvline(zdna_data['Z-score'].mean(), color='black', linestyle='--', 
                   label=f'–°—Ä–µ–¥–Ω–µ–µ: {zdna_data["Z-score"].mean():.1f}')
        ax5.legend()
    else:
        ax5.text(0.5, 0.5, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\nZ-score', 
                ha='center', va='center', transform=ax5.transAxes, fontsize=12)
        ax5.set_title('Z-score —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ')
    
    # 6. –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    ax6 = axes[1, 2]
    ax6.axis('off')
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é —Å–≤–æ–¥–∫—É
    summary_text = "üìä –°–í–û–î–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê\n\n"
    
    if not g4_data.empty:
        summary_text += f"üîπ G-–∫–≤–∞–¥—Ä—É–ø–ª–µ–∫—Å—ã: {len(g4_data)}\n"
        summary_text += f"   –•—Ä–æ–º–æ—Å–æ–º—ã: {g4_data[g4_chrom_col].nunique()}\n"
        summary_text += f"   –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞: {g4_data[g4_seq_col].str.len().mean():.1f} bp\n\n"
    
    if not zdna_data.empty:
        summary_text += f"üî∏ Z-DNA —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {len(zdna_data)}\n"
        if '–•—Ä–æ–º–æ—Å–æ–º–∞' in zdna_data.columns:
            summary_text += f"   –•—Ä–æ–º–æ—Å–æ–º—ã: {zdna_data['–•—Ä–æ–º–æ—Å–æ–º–∞'].nunique()}\n"
        if 'Z-score' in zdna_data.columns:
            summary_text += f"   –°—Ä–µ–¥–Ω–∏–π Z-score: {zdna_data['Z-score'].mean():.1f}\n\n"
    else:
        summary_text += "üî∏ Z-DNA: –î–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è...\n\n"
    
    if not promoter_data.empty:
        summary_text += f"üîπ –ü—Ä–æ–º–æ—Ç–æ—Ä—ã —Å G4: {len(promoter_data)}\n"
        if not g4_data.empty:
            promo_percent = (len(promoter_data) / len(g4_data)) * 100
            summary_text += f"   –î–æ–ª—è –æ—Ç –≤—Å–µ—Ö G4: {promo_percent:.1f}%\n\n"
    
    if colocalization_stats.get('total_colocalizations', 0) > 0:
        summary_text += f"üîó –ö–æ–ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏: {colocalization_stats['total_colocalizations']}\n"
        summary_text += f"   –°—Ä–µ–¥–Ω–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {colocalization_stats['average_distance']:.0f} bp\n"
    else:
        summary_text += "üîó –ö–æ–ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è...\n"
    
    ax6.text(0.1, 0.9, summary_text, transform=ax6.transAxes, fontsize=11,
             verticalalignment='top', fontfamily='monospace',
             bbox=dict(boxstyle="round,pad=0.5", facecolor="lightgray", alpha=0.8))
    
    plt.tight_layout()
    plt.savefig('results/integrated_analysis.png', dpi=300, bbox_inches='tight', 
                facecolor='white', edgecolor='none')
    plt.show()
    print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: results/integrated_analysis.png")

def generate_final_report(g4_data, zdna_data, promoter_data, colocalization_stats):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç"""
    print("üìù –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç...")
    
    report = """# üß¨ –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢: –ê–Ω–∞–ª–∏–∑ Z-DNA –∏ G-–∫–≤–∞–¥—Ä—É–ø–ª–µ–∫—Å–æ–≤
## Drosophila melanogaster (dm6)

### üìä –û–°–ù–û–í–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´

"""
    
    # G-–∫–≤–∞–¥—Ä—É–ø–ª–µ–∫—Å—ã
    if not g4_data.empty:
        report += f"""#### üîπ G-–∫–≤–∞–¥—Ä—É–ø–ª–µ–∫—Å—ã
- **–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ**: {len(g4_data)} —Å—Ç—Ä—É–∫—Ç—É—Ä
- **–•—Ä–æ–º–æ—Å–æ–º—ã**: {g4_data['–•—Ä–æ–º–æ—Å–æ–º–∞'].nunique()} —Ä–∞–∑–ª–∏—á–Ω—ã—Ö
- **–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞**: {g4_data['–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å'].str.len().mean():.1f} bp
- **–î–∏–∞–ø–∞–∑–æ–Ω –¥–ª–∏–Ω**: {g4_data['–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å'].str.len().min()}-{g4_data['–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å'].str.len().max()} bp

**–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ö—Ä–æ–º–æ—Å–æ–º–∞–º:**
"""
        for chrom, count in g4_data['–•—Ä–æ–º–æ—Å–æ–º–∞'].value_counts().items():
            percentage = (count / len(g4_data)) * 100
            report += f"- {chrom}: {count} ({percentage:.1f}%)\n"
        report += "\n"
    
    # Z-DNA
    if not zdna_data.empty:
        report += f"""#### üî∏ Z-DNA —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
- **–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ**: {len(zdna_data)} —Å—Ç—Ä—É–∫—Ç—É—Ä
"""
        if '–•—Ä–æ–º–æ—Å–æ–º–∞' in zdna_data.columns:
            report += f"- **–•—Ä–æ–º–æ—Å–æ–º—ã**: {zdna_data['–•—Ä–æ–º–æ—Å–æ–º–∞'].nunique()} —Ä–∞–∑–ª–∏—á–Ω—ã—Ö\n"
        
        if 'Z-score' in zdna_data.columns:
            report += f"""- **Z-score –¥–∏–∞–ø–∞–∑–æ–Ω**: {zdna_data['Z-score'].min():.1f}-{zdna_data['Z-score'].max():.1f}
- **–°—Ä–µ–¥–Ω–∏–π Z-score**: {zdna_data['Z-score'].mean():.1f}
"""
        
        if '–•—Ä–æ–º–æ—Å–æ–º–∞' in zdna_data.columns:
            report += "\n**–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ö—Ä–æ–º–æ—Å–æ–º–∞–º:**\n"
            for chrom, count in zdna_data['–•—Ä–æ–º–æ—Å–æ–º–∞'].value_counts().items():
                percentage = (count / len(zdna_data)) * 100
                report += f"- {chrom}: {count} ({percentage:.1f}%)\n"
        report += "\n"
    else:
        report += """#### üî∏ Z-DNA —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
- **–°—Ç–∞—Ç—É—Å**: –î–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Å —Ç–µ–∫—É—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (Z-score 300-400)
- **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è**: –í–æ–∑–º–æ–∂–Ω–æ, —Å–ª–µ–¥—É–µ—Ç —Ä–∞—Å—à–∏—Ä–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω Z-score –¥–ª—è –ø–æ–∏—Å–∫–∞

"""
    
    # –ü—Ä–æ–º–æ—Ç–æ—Ä—ã
    if not promoter_data.empty:
        report += f"""#### üîπ –ü—Ä–æ–º–æ—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑
- **G4 –≤ –ø—Ä–æ–º–æ—Ç–æ—Ä–∞—Ö**: {len(promoter_data)} —Å—Ç—Ä—É–∫—Ç—É—Ä
- **–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≥–µ–Ω—ã**: {promoter_data.get('Gene_ID', promoter_data.get('gene_id', pd.Series())).nunique() if 'Gene_ID' in promoter_data.columns or 'gene_id' in promoter_data.columns else 'N/A'}
"""
        if not g4_data.empty:
            promo_percent = (len(promoter_data) / len(g4_data)) * 100
            report += f"- **–î–æ–ª—è –æ—Ç –≤—Å–µ—Ö G4**: {promo_percent:.1f}%\n"
        report += "\n"
    
    # –ö–æ–ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è
    if colocalization_stats.get('total_colocalizations', 0) > 0:
        report += f"""#### üîó –ö–æ–ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è Z-DNA –∏ G-–∫–≤–∞–¥—Ä—É–ø–ª–µ–∫—Å–æ–≤
- **–í—Å–µ–≥–æ –∫–æ–ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–π**: {colocalization_stats['total_colocalizations']}
- **G4 —Å –±–ª–∏–∑–∫–∏–º–∏ Z-DNA**: {colocalization_stats['g4_with_zdna']}
- **Z-DNA —Å –±–ª–∏–∑–∫–∏–º–∏ G4**: {colocalization_stats['zdna_with_g4']}
- **–°—Ä–µ–¥–Ω–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ**: {colocalization_stats['average_distance']:.0f} bp
- **–û–∫–Ω–æ –ø–æ–∏—Å–∫–∞**: ¬±1000 bp

"""
    else:
        report += """#### üîó –ö–æ–ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è Z-DNA –∏ G-–∫–≤–∞–¥—Ä—É–ø–ª–µ–∫—Å–æ–≤
- **–°—Ç–∞—Ç—É—Å**: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
- **–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã**: 
  - Z-DNA —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Å —Ç–µ–∫—É—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
  - –°—Ç—Ä—É–∫—Ç—É—Ä—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —É—á–∞—Å—Ç–∫–∞—Ö –≥–µ–Ω–æ–º–∞
  - –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –æ–∫–Ω–æ –ø–æ–∏—Å–∫–∞

"""
    
    # –ë–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è
    report += """### üß¨ –ë–ò–û–õ–û–ì–ò–ß–ï–°–ö–ê–Ø –ò–ù–¢–ï–†–ü–†–ï–¢–ê–¶–ò–Ø

#### –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
"""
    
    if not g4_data.empty:
        report += """
**G-–∫–≤–∞–¥—Ä—É–ø–ª–µ–∫—Å—ã:**
- –£—á–∞—Å—Ç–≤—É—é—Ç –≤ —Ä–µ–≥—É–ª—è—Ü–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
- –í–ª–∏—è—é—Ç –Ω–∞ —Ä–µ–ø–ª–∏–∫–∞—Ü–∏—é –î–ù–ö
- –ò–≥—Ä–∞—é—Ç —Ä–æ–ª—å –≤ —Ç–µ–ª–æ–º–µ—Ä–Ω–æ–π –±–∏–æ–ª–æ–≥–∏–∏
- –ú–æ–≥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å –≥–µ–Ω–æ–º–Ω—É—é –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
"""
    
    if not zdna_data.empty:
        report += """
**Z-DNA —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:**
- –°–≤—è–∑–∞–Ω—ã —Å –∞–∫—Ç–∏–≤–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π
- –ú–æ–≥—É—Ç –∏–Ω–¥—É—Ü–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–±–∏–Ω–∞—Ü–∏—é
- –í–ª–∏—è—é—Ç –Ω–∞ —Ö—Ä–æ–º–∞—Ç–∏–Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
- –£—á–∞—Å—Ç–≤—É—é—Ç –≤ —ç–ø–∏–≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥—É–ª—è—Ü–∏–∏
"""
    
    if colocalization_stats.get('total_colocalizations', 0) > 0:
        report += f"""
**–ö–æ–ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è:**
- –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {colocalization_stats['total_colocalizations']} —Å–ª—É—á–∞–µ–≤ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–≥–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è
- –ú–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —Å–≤—è–∑—å –º–µ–∂–¥—É —Å—Ç—Ä—É–∫—Ç—É—Ä–∞–º–∏
- –¢—Ä–µ–±—É–µ—Ç –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
"""
    
    # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏
    report += """

### üî¨ –ú–ï–¢–û–î–û–õ–û–ì–ò–Ø

**–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞:**
- **–ì–µ–Ω–æ–º**: Drosophila melanogaster dm6
- **G-–∫–≤–∞–¥—Ä—É–ø–ª–µ–∫—Å—ã**: –ü–∞—Ç—Ç–µ—Ä–Ω G{3,}N{1,7}G{3,}N{1,7}G{3,}N{1,7}G{3,}
- **Z-DNA**: Z-Hunt —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (12 8 12), Z-score 300-400
- **–ü—Ä–æ–º–æ—Ç–æ—Ä—ã**: ¬±1000 bp –æ—Ç TSS
- **–ö–æ–ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è**: –û–∫–Ω–æ ¬±1000 bp

**–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:**
- Z-Hunt –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è Z-DNA
- –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è G-–∫–≤–∞–¥—Ä—É–ø–ª–µ–∫—Å–æ–≤
- STRING DB –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –æ–±–æ–≥–∞—â–µ–Ω–∏—è
- Python + pandas/matplotlib –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

"""
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    with open('results/FINAL_INTEGRATED_REPORT.md', 'w', encoding='utf-8') as f:
        f.write(report)
    
    print("‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: results/FINAL_INTEGRATED_REPORT.md")

def main():
    print("üß¨ –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ù–´–ô –ê–ù–ê–õ–ò–ó Z-DNA –∏ G-–ö–í–ê–î–†–£–ü–õ–ï–ö–°–û–í")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    os.makedirs('results', exist_ok=True)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    print("\nüìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    g4_data = load_g4_data()
    zdna_data = load_zdna_data()
    promoter_data = load_promoter_data()
    
    # –ê–Ω–∞–ª–∏–∑ –∫–æ–ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
    print("\nüîç –ê–Ω–∞–ª–∏–∑ –∫–æ–ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏...")
    colocalization_stats = analyze_colocalization(g4_data, zdna_data)
    
    # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    print("\nüé® –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π...")
    create_integrated_visualizations(g4_data, zdna_data, promoter_data, colocalization_stats)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    print("\nüìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...")
    generate_final_report(g4_data, zdna_data, promoter_data, colocalization_stats)
    
    print("\n" + "=" * 60)
    print("üéâ –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ù–´–ô –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")
    print("üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ results/")
    print("   üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è: integrated_analysis.png")
    print("   üìù –û—Ç—á–µ—Ç: FINAL_INTEGRATED_REPORT.md")

if __name__ == "__main__":
    main() 