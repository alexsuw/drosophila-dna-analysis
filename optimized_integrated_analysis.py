#!/usr/bin/env python3
"""
üß¨ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ Z-DNA –∏ G-–∫–≤–∞–¥—Ä—É–ø–ª–µ–∫—Å–æ–≤
–ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª—å—à–∏—Ö –Ω–∞–±–æ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import json
import os
from collections import defaultdict, Counter
import warnings
warnings.filterwarnings('ignore')

plt.style.use('bmh')
plt.rcParams['figure.figsize'] = [12, 8]
plt.rcParams['font.size'] = 10

def load_g4_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ G-–∫–≤–∞–¥—Ä—É–ø–ª–µ–∫—Å–æ–≤"""
    try:
        g4_data = pd.read_csv('results/quadruplex_results.csv')
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(g4_data)} G-–∫–≤–∞–¥—Ä—É–ø–ª–µ–∫—Å–æ–≤")
        return g4_data
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ G4 –¥–∞–Ω–Ω—ã—Ö: {e}")
        return pd.DataFrame()

def load_zdna_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ Z-DNA"""
    try:
        zdna_data = pd.read_csv('results/zdna_structures_corrected.txt', sep='\t', comment='#', 
                              names=['chromosome', 'position', 'zscore', 'score1', 'score2', 'length', 'sequence'])
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(zdna_data)} Z-DNA —Å—Ç—Ä—É–∫—Ç—É—Ä")
        return zdna_data
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Z-DNA –¥–∞–Ω–Ω—ã—Ö: {e}")
        return pd.DataFrame()

def fast_colocalization_analysis(g4_data, zdna_data, window=1000):
    """–ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É –ø–æ —Ö—Ä–æ–º–æ—Å–æ–º–∞–º"""
    print(f"üîç –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ (–æ–∫–Ω–æ {window} bp)...")
    
    if g4_data.empty or zdna_data.empty:
        print("‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return {'total_colocalizations': 0, 'summary_by_chromosome': {}}
    
    colocalization_summary = {}
    total_colocs = 0
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ö—Ä–æ–º–æ—Å–æ–º–∞–º –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
    for chrom in g4_data['chromosome'].unique():
        print(f"   –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {chrom}...")
        
        g4_chrom = g4_data[g4_data['chromosome'] == chrom]
        zdna_chrom = zdna_data[zdna_data['chromosome'] == chrom]
        
        if zdna_chrom.empty:
            continue
            
        colocs_in_chrom = 0
        g4_positions = g4_chrom['start'].values
        zdna_positions = zdna_chrom['position'].values
        
        # –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –ø–æ–∑–∏—Ü–∏–π
        for g4_pos in g4_positions:
            # –ù–∞—Ö–æ–¥–∏–º Z-DNA –≤ –æ–∫–Ω–µ
            distances = np.abs(zdna_positions - g4_pos)
            nearby = distances <= window
            colocs_in_chrom += np.sum(nearby)
        
        colocalization_summary[chrom] = {
            'g4_count': len(g4_chrom),
            'zdna_count': len(zdna_chrom),
            'colocalizations': colocs_in_chrom,
            'colocalization_rate': colocs_in_chrom / len(g4_chrom) if len(g4_chrom) > 0 else 0
        }
        
        total_colocs += colocs_in_chrom
        
    print(f"   üìä –í—Å–µ–≥–æ –∫–æ–ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–π: {total_colocs}")
    
    return {
        'total_colocalizations': total_colocs,
        'summary_by_chromosome': colocalization_summary
    }

def create_fast_visualizations(g4_data, zdna_data, colocalization_stats):
    """–°–æ–∑–¥–∞–µ–º –±—ã—Å—Ç—Ä—ã–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"""
    print("üé® –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏...")
    
    plt.rcParams['font.family'] = ['Arial Unicode MS', 'DejaVu Sans', 'sans-serif']
    
    fig, axes = plt.subplots(2, 3, figsize=(18, 12))
    fig.suptitle('üß¨ –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ Z-DNA –∏ G-–∫–≤–∞–¥—Ä—É–ø–ª–µ–∫—Å–æ–≤\nDrosophila melanogaster (dm6)', 
                 fontsize=16, fontweight='bold')
    
    # 1. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ö—Ä–æ–º–æ—Å–æ–º–∞–º
    ax1 = axes[0, 0]
    
    if not g4_data.empty:
        g4_counts = g4_data['chromosome'].value_counts()
        positions = np.arange(len(g4_counts))
        ax1.bar(positions - 0.2, g4_counts.values, 0.4, label='G-–∫–≤–∞–¥—Ä—É–ø–ª–µ–∫—Å—ã', alpha=0.7, color='blue')
    
    if not zdna_data.empty:
        zdna_counts = zdna_data['chromosome'].value_counts()
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Ç–æ–º—É –∂–µ –ø–æ—Ä—è–¥–∫—É —Ö—Ä–æ–º–æ—Å–æ–º
        zdna_aligned = []
        for chrom in g4_counts.index if not g4_data.empty else zdna_counts.index:
            zdna_aligned.append(zdna_counts.get(chrom, 0))
        
        ax1.bar(positions + 0.2, zdna_aligned, 0.4, label='Z-DNA', alpha=0.7, color='red')
    
    ax1.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä –ø–æ —Ö—Ä–æ–º–æ—Å–æ–º–∞–º')
    ax1.set_xlabel('–•—Ä–æ–º–æ—Å–æ–º–∞')
    ax1.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä—É–∫—Ç—É—Ä')
    ax1.set_xticks(positions)
    ax1.set_xticklabels(g4_counts.index if not g4_data.empty else zdna_counts.index, rotation=45)
    ax1.legend()
    
    # 2. –î–ª–∏–Ω—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
    ax2 = axes[0, 1]
    if not g4_data.empty:
        g4_lengths = g4_data['sequence'].str.len()
        ax2.hist(g4_lengths, bins=20, alpha=0.7, color='blue', label='G-–∫–≤–∞–¥—Ä—É–ø–ª–µ–∫—Å—ã', density=True)
    
    if not zdna_data.empty:
        zdna_lengths = zdna_data['sequence'].str.len()
        ax2.hist(zdna_lengths, bins=20, alpha=0.7, color='red', label='Z-DNA', density=True)
    
    ax2.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª–∏–Ω –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π')
    ax2.set_xlabel('–î–ª–∏–Ω–∞ (bp)')
    ax2.set_ylabel('–ü–ª–æ—Ç–Ω–æ—Å—Ç—å')
    ax2.legend()
    
    # 3. –ö–æ–ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Ö—Ä–æ–º–æ—Å–æ–º–∞–º
    ax3 = axes[0, 2]
    if colocalization_stats.get('summary_by_chromosome'):
        chroms = list(colocalization_stats['summary_by_chromosome'].keys())
        coloc_counts = [colocalization_stats['summary_by_chromosome'][c]['colocalizations'] for c in chroms]
        
        ax3.bar(chroms, coloc_counts, color='green', alpha=0.7)
        ax3.set_title('–ö–æ–ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ —Ö—Ä–æ–º–æ—Å–æ–º–∞–º')
        ax3.set_xlabel('–•—Ä–æ–º–æ—Å–æ–º–∞')
        ax3.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–π')
        ax3.tick_params(axis='x', rotation=45)
    else:
        ax3.text(0.5, 0.5, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ\n–∫–æ–ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏', 
                ha='center', va='center', transform=ax3.transAxes, fontsize=12)
        ax3.set_title('–ö–æ–ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è')
    
    # 4. Z-score —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    ax4 = axes[1, 0]
    if not zdna_data.empty:
        ax4.hist(zdna_data['zscore'], bins=30, color='red', alpha=0.7)
        ax4.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ Z-score')
        ax4.set_xlabel('Z-score')
        ax4.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä—É–∫—Ç—É—Ä')
        ax4.axvline(zdna_data['zscore'].mean(), color='black', linestyle='--', 
                   label=f'–°—Ä–µ–¥–Ω–µ–µ: {zdna_data["zscore"].mean():.1f}')
        ax4.legend()
    
    # 5. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
    ax5 = axes[1, 1]
    if colocalization_stats.get('summary_by_chromosome'):
        chroms = list(colocalization_stats['summary_by_chromosome'].keys())
        rates = [colocalization_stats['summary_by_chromosome'][c]['colocalization_rate'] * 100 for c in chroms]
        
        ax5.bar(chroms, rates, color='orange', alpha=0.7)
        ax5.set_title('–ß–∞—Å—Ç–æ—Ç–∞ –∫–æ–ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ (%)')
        ax5.set_xlabel('–•—Ä–æ–º–æ—Å–æ–º–∞')
        ax5.set_ylabel('–ü—Ä–æ—Ü–µ–Ω—Ç G4 —Å Z-DNA')
        ax5.tick_params(axis='x', rotation=45)
    
    # 6. –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    ax6 = axes[1, 2]
    ax6.axis('off')
    
    summary_text = "üìä –°–í–û–î–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê\n\n"
    
    if not g4_data.empty:
        summary_text += f"üîπ G-–∫–≤–∞–¥—Ä—É–ø–ª–µ–∫—Å—ã: {len(g4_data):,}\n"
        summary_text += f"   –•—Ä–æ–º–æ—Å–æ–º—ã: {g4_data['chromosome'].nunique()}\n"
        summary_text += f"   –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞: {g4_data['sequence'].str.len().mean():.1f} bp\n\n"
    
    if not zdna_data.empty:
        summary_text += f"üî∏ Z-DNA —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {len(zdna_data):,}\n"
        summary_text += f"   –•—Ä–æ–º–æ—Å–æ–º—ã: {zdna_data['chromosome'].nunique()}\n"
        summary_text += f"   –°—Ä–µ–¥–Ω–∏–π Z-score: {zdna_data['zscore'].mean():.1f}\n"
        summary_text += f"   –î–∏–∞–ø–∞–∑–æ–Ω Z-score: {zdna_data['zscore'].min():.0f}-{zdna_data['zscore'].max():.0f}\n\n"
    
    if colocalization_stats.get('total_colocalizations', 0) > 0:
        summary_text += f"üîó –ö–æ–ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏: {colocalization_stats['total_colocalizations']:,}\n"
        
        if not g4_data.empty:
            coloc_percent = (colocalization_stats['total_colocalizations'] / len(g4_data)) * 100
            summary_text += f"   –ü—Ä–æ—Ü–µ–Ω—Ç G4: {coloc_percent:.1f}%\n"
    else:
        summary_text += "üîó –ö–æ–ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏: –ù–µ –Ω–∞–π–¥–µ–Ω—ã\n"
    
    ax6.text(0.1, 0.9, summary_text, transform=ax6.transAxes, fontsize=11,
             verticalalignment='top', fontfamily='monospace',
             bbox=dict(boxstyle="round,pad=0.5", facecolor="lightgray", alpha=0.8))
    
    plt.tight_layout()
    plt.savefig('results/fast_integrated_analysis.png', dpi=300, bbox_inches='tight', 
                facecolor='white', edgecolor='none')
    plt.show()
    print("‚úÖ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: results/fast_integrated_analysis.png")

def save_analysis_results(g4_data, zdna_data, colocalization_stats):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞"""
    print("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞...")
    
    results = {
        'analysis_type': 'integrated_z_dna_g4_analysis',
        'timestamp': pd.Timestamp.now().isoformat(),
        'datasets': {
            'g4_structures': {
                'count': len(g4_data) if not g4_data.empty else 0,
                'chromosomes': g4_data['chromosome'].nunique() if not g4_data.empty else 0,
                'avg_length': float(g4_data['sequence'].str.len().mean()) if not g4_data.empty else 0
            },
            'zdna_structures': {
                'count': len(zdna_data) if not zdna_data.empty else 0,
                'chromosomes': zdna_data['chromosome'].nunique() if not zdna_data.empty else 0,
                'avg_zscore': float(zdna_data['zscore'].mean()) if not zdna_data.empty else 0,
                'zscore_range': [float(zdna_data['zscore'].min()), float(zdna_data['zscore'].max())] if not zdna_data.empty else [0, 0]
            }
        },
        'colocalization': colocalization_stats
    }
    
    with open('results/integrated_analysis_results.json', 'w', encoding='utf-8') as f:
        json.dump(results, f, indent=2, ensure_ascii=False)
    
    print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: results/integrated_analysis_results.json")

def main():
    print("üß¨ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ù–´–ô –ê–ù–ê–õ–ò–ó")
    print("="*60)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    print("\nüìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    g4_data = load_g4_data()
    zdna_data = load_zdna_data()
    
    # –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
    print("\nüîç –ê–Ω–∞–ª–∏–∑ –∫–æ–ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏...")
    colocalization_stats = fast_colocalization_analysis(g4_data, zdna_data)
    
    # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    print("\nüé® –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π...")
    create_fast_visualizations(g4_data, zdna_data, colocalization_stats)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
    save_analysis_results(g4_data, zdna_data, colocalization_stats)
    
    print("\nüéâ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")
    print(f"üìä G-–∫–≤–∞–¥—Ä—É–ø–ª–µ–∫—Å—ã: {len(g4_data):,}")
    print(f"üìä Z-DNA —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {len(zdna_data):,}")
    print(f"üìä –ö–æ–ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏: {colocalization_stats.get('total_colocalizations', 0):,}")
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    create_final_report(g4_data, zdna_data, colocalization_stats)

def create_final_report(g4_data, zdna_data, colocalization_stats):
    """–°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç"""
    print("\nüìù –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
    
    report = f"""# üß¨ –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢: –ê–Ω–∞–ª–∏–∑ Z-DNA –∏ G-–∫–≤–∞–¥—Ä—É–ø–ª–µ–∫—Å–æ–≤

## –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

### G-–∫–≤–∞–¥—Ä—É–ø–ª–µ–∫—Å—ã
- **–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ**: {len(g4_data):,} —Å—Ç—Ä—É–∫—Ç—É—Ä
- **–•—Ä–æ–º–æ—Å–æ–º—ã**: {g4_data['chromosome'].nunique() if not g4_data.empty else 0}
- **–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞**: {g4_data['sequence'].str.len().mean():.1f} bp

### Z-DNA —Å—Ç—Ä—É–∫—Ç—É—Ä—ã  
- **–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ**: {len(zdna_data):,} —Å—Ç—Ä—É–∫—Ç—É—Ä
- **–•—Ä–æ–º–æ—Å–æ–º—ã**: {zdna_data['chromosome'].nunique() if not zdna_data.empty else 0}
- **–°—Ä–µ–¥–Ω–∏–π Z-score**: {zdna_data['zscore'].mean():.1f}
- **–î–∏–∞–ø–∞–∑–æ–Ω Z-score**: {zdna_data['zscore'].min():.0f} - {zdna_data['zscore'].max():.0f}

### –ö–æ–ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è
- **–í—Å–µ–≥–æ –∫–æ–ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–π**: {colocalization_stats.get('total_colocalizations', 0):,}
"""

    if not g4_data.empty and colocalization_stats.get('total_colocalizations', 0) > 0:
        coloc_percent = (colocalization_stats['total_colocalizations'] / len(g4_data)) * 100
        report += f"- **–ü—Ä–æ—Ü–µ–Ω—Ç G4 —Å Z-DNA**: {coloc_percent:.1f}%\n"

    report += f"""
## –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ö—Ä–æ–º–æ—Å–æ–º–∞–º

| –•—Ä–æ–º–æ—Å–æ–º–∞ | G-–∫–≤–∞–¥—Ä—É–ø–ª–µ–∫—Å—ã | Z-DNA | –ö–æ–ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ |
|-----------|----------------|-------|---------------|
"""

    if not g4_data.empty:
        for chrom in sorted(g4_data['chromosome'].unique()):
            g4_count = len(g4_data[g4_data['chromosome'] == chrom])
            zdna_count = len(zdna_data[zdna_data['chromosome'] == chrom]) if not zdna_data.empty else 0
            coloc_count = colocalization_stats.get('summary_by_chromosome', {}).get(chrom, {}).get('colocalizations', 0)
            report += f"| {chrom} | {g4_count:,} | {zdna_count:,} | {coloc_count:,} |\n"

    report += f"""
## –ú–µ—Ç–æ–¥—ã –∞–Ω–∞–ª–∏–∑–∞

### Z-Hunt –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
- **–û–∫–Ω–æ**: 12 bp
- **–ü–æ—Ä–æ–≥ 1**: 8
- **–ü–æ—Ä–æ–≥ 2**: 12  
- **Z-score –¥–∏–∞–ø–∞–∑–æ–Ω**: 300-400

### G-–∫–≤–∞–¥—Ä—É–ø–ª–µ–∫—Å –ø–æ–∏—Å–∫
- **–ü–∞—Ç—Ç–µ—Ä–Ω**: G{{3+}}N{{1-7}}G{{3+}}N{{1-7}}G{{3+}}N{{1-7}}G{{3+}}
- **–†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ**: –°—Ç—Ä–æ–≥–∏–π –ø–æ–∏—Å–∫

### –ö–æ–ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è
- **–û–∫–Ω–æ –ø–æ–∏—Å–∫–∞**: ¬±1000 bp
- **–ö—Ä–∏—Ç–µ—Ä–∏–π**: –ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π

## –§–∞–π–ª—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

- `results/quadruplex_results.csv` - G-–∫–≤–∞–¥—Ä—É–ø–ª–µ–∫—Å—ã
- `results/zdna_structures_corrected.txt` - Z-DNA —Å—Ç—Ä—É–∫—Ç—É—Ä—ã  
- `results/fast_integrated_analysis.png` - –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
- `results/integrated_analysis_results.json` - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

## üéØ –ó–∞–∫–ª—é—á–µ–Ω–∏–µ

–ê–Ω–∞–ª–∏–∑ –≥–µ–Ω–æ–º–∞ Drosophila melanogaster (dm6) –≤—ã—è–≤–∏–ª:

1. **{len(g4_data):,} G-–∫–≤–∞–¥—Ä—É–ø–ª–µ–∫—Å–æ–≤** —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø–æ –≤—Å–µ–º —Ö—Ä–æ–º–æ—Å–æ–º–∞–º
2. **{len(zdna_data):,} Z-DNA —Å—Ç—Ä—É–∫—Ç—É—Ä** —Å Z-score 300-400
3. **{colocalization_stats.get('total_colocalizations', 0):,} —Å–ª—É—á–∞–µ–≤ –∫–æ–ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏** –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 1 kb

–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä –î–ù–ö –≤ –≥–µ–Ω–æ–º–µ –¥—Ä–æ–∑–æ—Ñ–∏–ª—ã –∏ –∏—Ö –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –∫–æ—ç–∫—Å–ø—Ä–µ—Å—Å–∏—é –≤ —Ä–µ–≥—É–ª—è—Ç–æ—Ä–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–∞—Ö.
"""

    with open('results/FINAL_INTEGRATED_REPORT.md', 'w', encoding='utf-8') as f:
        f.write(report)
    
    print("‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç: results/FINAL_INTEGRATED_REPORT.md")

if __name__ == "__main__":
    main() 